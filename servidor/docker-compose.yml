version: "3.9"
services:
  nginx_proxy:
    image: jwilder/nginx-proxy
    restart: on-failure:${CONTAINER_RETRIES}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - certs:/etc/nginx/certs:ro
      - confd:/etc/nginx/conf.d
      - vhostd:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - acme:/etc/acme.sh
    labels:
      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true"
    depends_on:
      - api

  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    restart: on-failure:${CONTAINER_RETRIES}
    environment:
      - NGINX_PROXY_CONTAINER=nginx-proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs:/etc/nginx/certs:rw
      - html:/usr/share/nginx/html
      - vhostd:/etc/nginx/vhost.d
      - confd:/etc/nginx/conf.d
      - acme:/etc/acme.sh
    depends_on:
      - nginx_proxy

  postgres:
    container_name: ${DATABASE_IP}
    image: postgres:15.5
    expose:
      - "${DATABASE_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker_files/create_db.sh:/docker-entrypoint-initdb.d/create_db.sh
    restart: on-failure:${CONTAINER_RETRIES}
    environment:
      - VIRTUAL_HOST=
      - LETSENCRYPT_HOST=
    env_file:
      - .env

  api:
    build: 
      context: .
      dockerfile: docker_files/Dockerfile
    expose:
      - "${SERVER_PORT}"
    environment:
      - DEVELOPMENT=False
      - VIRTUAL_HOST=${VIRTUAL_HOST}
      - LETSENCRYPT_HOST=${LETSENCRYPT_HOST}
    depends_on:
      - ${DATABASE_IP}
    volumes:
      - app_logs:/${LOGS_PATH}
    restart: on-failure:${CONTAINER_RETRIES}
    env_file:
      - .env

volumes:
  postgres_data:
  app_logs:
  certs:
  html:
  vhostd:
  confd:
  acme: